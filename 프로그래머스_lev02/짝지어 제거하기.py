'''
짝지어 제거하기
문제 설명
짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.

예를 들어, 문자열 S = baabaa 라면

b aa baa → bb aa → aa →

의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.

제한사항
문자열의 길이 : 1,000,000이하의 자연수
문자열은 모두 소문자로 이루어져 있습니다.
입출력 예
s	result
baabaa	1
cdcd	0
입출력 예 설명
입출력 예 #1
위의 예시와 같습니다.
입출력 예 #2
문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.

※ 공지 - 2020년 6월 8일 테스트케이스가 추가되었습니다.
'''

def solution(s):
    answer = 0
    stack = []
    # 먼저 s에 0번째 자리수를 넣어놓는다.
    stack.append(s[0])
    for i in range(1,len(s)):
        # list에 인덱스 부족하다는 에러 방지를 위해 아예 비었을 경우엔 값을 넣는다.
        if len(stack) == 0:
            stack.append(s[i])
        else:
            # 그게 아니라면 맨뒤에 값이랑 현재 값이랑 같은지 비교하고 같으면 삭제
            if stack[-1] == s[i]:
                stack.pop()
            else:
                # 아니면 추가해준다.
                stack.append(s[i])
    # 전체 스택이 비었으면 모두 같다.
    if len(stack) == 0:
        answer = 1
    return answer



s = 'cdcd'
print(solution(s))